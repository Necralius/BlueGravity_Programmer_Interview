//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project Main Folder/InputAssets/MainPlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainPlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainPlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainPlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerKeyboard"",
            ""id"": ""a2550ec5-c379-4acb-bf1b-dc85dd3a58ac"",
            ""actions"": [
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""3945f72a-c492-4b99-9865-88ae146e3a08"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f0e219df-6ef7-4497-aaf0-3ca251391055"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InventoryAct"",
                    ""type"": ""Button"",
                    ""id"": ""51acb86d-2dd9-4497-9eea-52a892e74972"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReloadScene"",
                    ""type"": ""Button"",
                    ""id"": ""f33ff1c5-512d-4f92-9d43-88c7b8eeb2fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8d5bcf06-5554-4028-b5b5-f9b61cbd6f53"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""61cafc35-3f39-48a0-b4c8-9b90334a8927"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abf7b98b-866c-490c-8508-866859e0b98e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e83bc5d-2fbd-404e-ad44-a5a507c123c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""88154c25-550b-43ef-b0af-e69bac23f9e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ef53066-ccc0-4052-8780-ea25c2008078"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d15a12a-4fb0-4158-88ed-7a474fc4c7bb"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryAct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3caeb62c-d1de-4ad2-840b-f7d6c596c9e3"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerJoystick"",
            ""id"": ""dbafd8e6-6c12-4950-8d1b-1b9842d60e53"",
            ""actions"": [
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""0a14d626-5ed3-4c79-8813-1b366903fbe4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a5e86edc-1055-4ade-98dd-881286565790"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InventoryAct"",
                    ""type"": ""Button"",
                    ""id"": ""3301e95c-a352-4059-ad70-f75a1317ffbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a5180ce1-a117-4b08-ad3f-6c863ef2f254"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""54ff4b03-78d3-46c1-aa4f-c7ecca1dfd92"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""44990bf2-98ec-41c5-9af7-963001fb82fe"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6782c4de-7c3a-4d6f-90b6-f470955c2b7a"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ca2906f8-f9f0-414f-8b64-0732ae3e03e4"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5516c3f1-292a-4ebb-91c7-ba78cc915794"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""368bf76e-d823-4d35-ac50-721b4cb52c81"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryAct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerKeyboard
        m_PlayerKeyboard = asset.FindActionMap("PlayerKeyboard", throwIfNotFound: true);
        m_PlayerKeyboard_MoveAction = m_PlayerKeyboard.FindAction("MoveAction", throwIfNotFound: true);
        m_PlayerKeyboard_Interact = m_PlayerKeyboard.FindAction("Interact", throwIfNotFound: true);
        m_PlayerKeyboard_InventoryAct = m_PlayerKeyboard.FindAction("InventoryAct", throwIfNotFound: true);
        m_PlayerKeyboard_ReloadScene = m_PlayerKeyboard.FindAction("ReloadScene", throwIfNotFound: true);
        // PlayerJoystick
        m_PlayerJoystick = asset.FindActionMap("PlayerJoystick", throwIfNotFound: true);
        m_PlayerJoystick_MoveAction = m_PlayerJoystick.FindAction("MoveAction", throwIfNotFound: true);
        m_PlayerJoystick_Interact = m_PlayerJoystick.FindAction("Interact", throwIfNotFound: true);
        m_PlayerJoystick_InventoryAct = m_PlayerJoystick.FindAction("InventoryAct", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKeyboard
    private readonly InputActionMap m_PlayerKeyboard;
    private IPlayerKeyboardActions m_PlayerKeyboardActionsCallbackInterface;
    private readonly InputAction m_PlayerKeyboard_MoveAction;
    private readonly InputAction m_PlayerKeyboard_Interact;
    private readonly InputAction m_PlayerKeyboard_InventoryAct;
    private readonly InputAction m_PlayerKeyboard_ReloadScene;
    public struct PlayerKeyboardActions
    {
        private @MainPlayerControl m_Wrapper;
        public PlayerKeyboardActions(@MainPlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_PlayerKeyboard_MoveAction;
        public InputAction @Interact => m_Wrapper.m_PlayerKeyboard_Interact;
        public InputAction @InventoryAct => m_Wrapper.m_PlayerKeyboard_InventoryAct;
        public InputAction @ReloadScene => m_Wrapper.m_PlayerKeyboard_ReloadScene;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKeyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerKeyboardActions instance)
        {
            if (m_Wrapper.m_PlayerKeyboardActionsCallbackInterface != null)
            {
                @MoveAction.started -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnMoveAction;
                @MoveAction.performed -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnMoveAction;
                @MoveAction.canceled -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnMoveAction;
                @Interact.started -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnInteract;
                @InventoryAct.started -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnInventoryAct;
                @InventoryAct.performed -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnInventoryAct;
                @InventoryAct.canceled -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnInventoryAct;
                @ReloadScene.started -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnReloadScene;
                @ReloadScene.performed -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnReloadScene;
                @ReloadScene.canceled -= m_Wrapper.m_PlayerKeyboardActionsCallbackInterface.OnReloadScene;
            }
            m_Wrapper.m_PlayerKeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveAction.started += instance.OnMoveAction;
                @MoveAction.performed += instance.OnMoveAction;
                @MoveAction.canceled += instance.OnMoveAction;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @InventoryAct.started += instance.OnInventoryAct;
                @InventoryAct.performed += instance.OnInventoryAct;
                @InventoryAct.canceled += instance.OnInventoryAct;
                @ReloadScene.started += instance.OnReloadScene;
                @ReloadScene.performed += instance.OnReloadScene;
                @ReloadScene.canceled += instance.OnReloadScene;
            }
        }
    }
    public PlayerKeyboardActions @PlayerKeyboard => new PlayerKeyboardActions(this);

    // PlayerJoystick
    private readonly InputActionMap m_PlayerJoystick;
    private IPlayerJoystickActions m_PlayerJoystickActionsCallbackInterface;
    private readonly InputAction m_PlayerJoystick_MoveAction;
    private readonly InputAction m_PlayerJoystick_Interact;
    private readonly InputAction m_PlayerJoystick_InventoryAct;
    public struct PlayerJoystickActions
    {
        private @MainPlayerControl m_Wrapper;
        public PlayerJoystickActions(@MainPlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAction => m_Wrapper.m_PlayerJoystick_MoveAction;
        public InputAction @Interact => m_Wrapper.m_PlayerJoystick_Interact;
        public InputAction @InventoryAct => m_Wrapper.m_PlayerJoystick_InventoryAct;
        public InputActionMap Get() { return m_Wrapper.m_PlayerJoystick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerJoystickActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerJoystickActions instance)
        {
            if (m_Wrapper.m_PlayerJoystickActionsCallbackInterface != null)
            {
                @MoveAction.started -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnMoveAction;
                @MoveAction.performed -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnMoveAction;
                @MoveAction.canceled -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnMoveAction;
                @Interact.started -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnInteract;
                @InventoryAct.started -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnInventoryAct;
                @InventoryAct.performed -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnInventoryAct;
                @InventoryAct.canceled -= m_Wrapper.m_PlayerJoystickActionsCallbackInterface.OnInventoryAct;
            }
            m_Wrapper.m_PlayerJoystickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveAction.started += instance.OnMoveAction;
                @MoveAction.performed += instance.OnMoveAction;
                @MoveAction.canceled += instance.OnMoveAction;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @InventoryAct.started += instance.OnInventoryAct;
                @InventoryAct.performed += instance.OnInventoryAct;
                @InventoryAct.canceled += instance.OnInventoryAct;
            }
        }
    }
    public PlayerJoystickActions @PlayerJoystick => new PlayerJoystickActions(this);
    public interface IPlayerKeyboardActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInventoryAct(InputAction.CallbackContext context);
        void OnReloadScene(InputAction.CallbackContext context);
    }
    public interface IPlayerJoystickActions
    {
        void OnMoveAction(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInventoryAct(InputAction.CallbackContext context);
    }
}
